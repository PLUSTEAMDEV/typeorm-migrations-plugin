import * as path from "path";
import * as fs from "fs";
import {
  MigrationFileContent,
  MigrationSqls,
  PsqlUnitType,
} from "@/utils/database-migrations/interfaces";
import { MIGRATION_ROUTES, MIGRATIONS_PATH } from "migrationsconfig";
import { format } from "@sqltools/formatter/lib/sqlFormatter";
import { GitChangedFilesDetector } from "@/utils/database-migrations/GitChangedFilesDetector";

export class MigrationUtils {
  /**
   * Construct the template string with its content.
   * @param name Name of the migration file.
   * @param timestamp Timestamp when the file was created.
   * @param content Content for the up and down functions.
   * @return the template string.
   */
  static getTemplate(
    name: string,
    timestamp: number,
    content: MigrationFileContent
  ): string {
    return `import {MigrationInterface, QueryRunner} from "typeorm";
export class ${name}${timestamp} implements MigrationInterface {
    name = '${name}${timestamp}';
    public async up(queryRunner: QueryRunner): Promise<void> {
        ${content.up}
    }
    public async down(queryRunner: QueryRunner): Promise<void> {
        ${content.down}
    }
}`;
  }

  /**
   * Gets the "all-migrations" file generated by the generate:migrations:all command.
   * If the last file in the directory does not include "all-migrations" then returns "";
   * @return file name of the migration file generated.
   */
  //TODO: #CU-2943u4 Improve the process of the most recent migration file
  static async getMostRecentMigrationFile(): Promise<string> {
    let dir = path.resolve(MIGRATIONS_PATH);
    let files = fs.readdirSync(dir);
    return files[files.length - 1].includes("all-migrations")
      ? files[files.length - 1]
      : "";
  }

  /**
   * Formats the sql query with blank spaces.
   * @param query Filepath to the directory.
   * @return formatted query.
   */
  static prettifyQuery(query: string) {
    const formattedQuery = format(query, { indent: "    " });
    return "\n" + formattedQuery.replace(/^/gm, "            ") + "\n        ";
  }

  static getPsqlUnitTypeChangedFiles(psqlUnitType: PsqlUnitType) {
    const isExpectedPsqlUnitType = (filename: string) =>
      filename.includes(MIGRATION_ROUTES[psqlUnitType].path);
    return GitChangedFilesDetector.getChangedFiles().filter((filename) =>
      isExpectedPsqlUnitType(filename)
    );
  }

  static buildMigrationContent(
    migrationsSqls: MigrationSqls
  ): MigrationFileContent {
    const formatSqlToQueryRunnerSentence = (query: string) =>
      `\t\t\t\tawait queryRunner.query(\`${this.prettifyQuery(query)}\`);\n`;
    let up: string = "";
    let down: string = "";
    for (const upSql of migrationsSqls.upSqls) {
      up += formatSqlToQueryRunnerSentence(upSql);
    }
    for (const downSql of migrationsSqls.downSqls) {
      down += formatSqlToQueryRunnerSentence(downSql);
    }
    return {
      up,
      down,
    };
  }
}
