import { MigrationSqls, GeneratorOptions, DatabaseUnitType } from "@/utils/database-migrations/interfaces";
/**
 * Generates or updates the migration file with the changes for:
 * Triggers, Routines, Extensions and Calculated Table's fields.
 */
export declare class MigrationGenerator {
    options: GeneratorOptions;
    databaseUnitTypes: DatabaseUnitType[];
    constructor(options: GeneratorOptions);
    setOptions(options: GeneratorOptions): void;
    /**
     * Insert the up a down content in the template string and creates the migration files.
     * @param migrationSqls Migration function array.
     * @return A promise when the file is created.
     */
    createMigrationFile(migrationSqls: MigrationSqls): Promise<void>;
    /**
     * Update the migration file generated by TypeORM and include the changes of
     * triggers and functions in the up and down methods.
     * If the custom option is true, then also include the queries for the calculated fields.
     * @param fileName The file generated by TypeORM.
     * @param migrationSqls Migration function array.
     * @return A promise when the file is updated.
     */
    modifyMigrationFile(fileName: string, migrationSqls: MigrationSqls): Promise<void>;
    /**
     * If TypeORM detects changes in the entities or the views, it will generate a migration file,
     * so we get that fileName an modify its content with the changes of the structures (triggers, routines, etc)
     * If TypeORM does not generate a file, then it calls the createMigrationFile.
     * @param migrationSqls Migration function array.
     * @return A promise when the file is created or updated.
     */
    createOrUpdateMigrationFile(migrationSqls: MigrationSqls): Promise<void>;
    /**
     * Map the structures with changes and decide if we create migration file for the changes of the structures,
     * or if we choose the 'all' option, then update the generated file by TypeORM.
     * Note: If the option property is 'extension' then the databaseStructures will be extensions.
     * @return A promise when the file is generated.
     */
    generate(): Promise<void>;
}
